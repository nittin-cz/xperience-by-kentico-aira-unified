name: Build and deploy

on:
  workflow_dispatch:
  push:
    branches:
      - internal/nuget
  pull_request:
    types: [closed]
    branches:
      - internal/nuget

jobs:
  Get_version:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get_version.outputs.new_version }}
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.NITTIN_CI_TOKEN }}

      - name: Extract version from Directory.Build.props
        id: get_version
        run: |
          VERSION_PREFIX=$(awk -F '[<>]' '/<VersionPrefix>/ {print $3}' Directory.Build.props)
          VERSION_SUFFIX=$(awk -F '[<>]' '/<VersionSuffix>/ {print $3}' Directory.Build.props)

          if [[ -n "$VERSION_SUFFIX" ]]; then
            NEW_VERSION="${VERSION_PREFIX}-${VERSION_SUFFIX}"
          else
            NEW_VERSION="${VERSION_PREFIX}"
          fi

          echo "Extracted Version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NuGetVersion=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT


  Build_and_publish:
    needs: Get_version
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.Get_version.outputs.new_version }}
      NuGetVersion: ${{ needs.Get_version.outputs.new_version }}
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.NITTIN_CI_TOKEN }}

      - name: Debug Environment Variables
        run: |
          echo "NuGetVersion: ${{ env.NuGetVersion }}"
          echo "VERSION: ${{ env.VERSION }}"

      - name: Setup .NET 8.x
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Install npm dependencies
        run: |
          cd src/Kentico.Xperience.AiraUnified/FrontEnd
          npm ci --no-audit --no-fund

      - name: Build npm scripts
        run: |
          cd src/Kentico.Xperience.AiraUnified/FrontEnd
          npm run build

      - name: Build npm css
        run: |
          cd src/Kentico.Xperience.AiraUnified/FrontEnd
          npm run build-css

      - name: Package the project
        run: |
          dotnet pack src/Kentico.Xperience.AiraUnified/Kentico.Xperience.AiraUnified.csproj \
            --configuration Release \
            -p:PackageVersion=${{ env.VERSION }} \
            -p:Version=${{ env.VERSION }} \
            -p:AssemblyVersion=1.0.0.0 \
            -p:FileVersion=${{ env.VERSION }}

      - name: Verify NuGet package contents
        run: |
          unzip -l src/Kentico.Xperience.AiraUnified/bin/Release/Kentico.Xperience.AiraUnified.${{ env.VERSION }}.nupkg

      - name: Publish the package
        run: |
          dotnet nuget push "src/Kentico.Xperience.AiraUnified/bin/Release/Kentico.Xperience.AiraUnified.${{ env.VERSION }}.nupkg" \
            --api-key ${{ secrets.NITTIN_CI_TOKEN }} \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}"
