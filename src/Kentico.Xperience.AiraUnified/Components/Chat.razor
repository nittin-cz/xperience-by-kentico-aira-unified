@using Kentico.Xperience.AiraUnified.Models
@using Kentico.Xperience.AiraUnified.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@implements IAsyncDisposable

@inject IJSRuntime JSRuntime
@inject IChatService ChatService;

<div class="chat-container">
    <div class="chat-messages" @ref="messagesContainer">
        @foreach (var message in messages)
        {
            <div class="message @(message.Type == ChatMessageType.User ? "user" : "ai")">
                <div class="message-content">@message.Content</div>
                <div class="message-time">@message.Timestamp.ToString("HH:mm")</div>
            </div>
        }
    </div>
    
    <div class="chat-input">
        <div class="input-group">
            <input @bind="currentMessage" @onkeypress="HandleKeyPress" 
                   placeholder="Napište zprávu..." class="form-control" />
            <button @onclick="SendMessage" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm"></span>
                }
                else
                {
                    <span>Odeslat</span>
                }
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public string SessionId { get; set; } = string.Empty;
    
    private List<ChatMessage> messages = new();
    private string currentMessage = "";
    private bool isLoading = false;
    private ElementReference messagesContainer;
    
    protected override async Task OnInitializedAsync()
    {
        messages = await ChatService.GetChatHistoryAsync(SessionId);
    }
    
    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isLoading) return;
        
        var messageToSend = currentMessage;
        currentMessage = "";
        isLoading = true;
        
        StateHasChanged();
        //await ScrollToBottom();
        
        try
        {
            await ChatService.SendMessageAsync(messageToSend, SessionId);
            messages = await ChatService.GetChatHistoryAsync(SessionId);
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage
            {
                Content = "Omlouvám se, nastala chyba. Zkuste to znovu.",
                Author = "System",
                Type = ChatMessageType.System
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            //await ScrollToBottom();
        }
    }
    
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }
    
    // private async Task ScrollToBottom()
    // {
    //     await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainer);
    // }
    
    public async ValueTask DisposeAsync()
    {
        // Cleanup if needed
    }
}