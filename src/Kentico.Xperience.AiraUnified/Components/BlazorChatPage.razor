@using Kentico.Xperience.AiraUnified.Chat
@using Kentico.Xperience.AiraUnified.Chat.Models
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IBlazorChatService ChatService
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="row">
        <div class="col-12">
            <div class="chat-container">
                <div class="chat-header">
                    <h2>@ThreadName</h2>
                </div>
                
                <div class="chat-messages" style="height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; margin-bottom: 10px;" @ref="messagesContainer">
                    @foreach (var message in messages)
                    {
                        <div class="message @(message.Role == "user" ? "user-message" : "ai-message")" style="margin-bottom: 10px;">
                            <div class="message-content" style="padding: 8px; border-radius: 8px; @(message.Role == "user" ? "background-color: #007bff; color: white; text-align: right;" : "background-color: #f8f9fa;")">
                                @if (message.ServiceUnavailable)
                                {
                                    <div class="alert alert-warning">
                                        <strong>Service Unavailable</strong>
                                        <p>Sorry, the chat service is currently unavailable. Please try again later.</p>
                                    </div>
                                }
                                else
                                {
                                    @message.Message
                                }
                            </div>
                            
                            @if (message.QuickPrompts?.Any() == true)
                            {
                                <div class="quick-prompts" style="margin-top: 8px;">
                                    @foreach (var prompt in message.QuickPrompts)
                                    {
                                        <button class="btn btn-outline-primary btn-sm me-2 mb-2" @onclick="() => UseQuickPrompt(prompt, message.QuickPromptsGroupId)">
                                            @prompt
                                        </button>
                                    }
                                </div>
                            }
                        </div>
                    }
                    
                    @if (isLoading)
                    {
                        <div class="loading-indicator">
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <span class="ms-2">AI is thinking...</span>
                        </div>
                    }
                </div>
                
                <div class="chat-input">
                    <div class="input-group">
                        <input @ref="messageInput" 
                               value="@currentMessage" 
                               @oninput="OnInputChange"
                               @onkeydown="HandleKeyDown" 
                               placeholder="Type your message..." 
                               class="form-control" 
                               disabled="@isLoading" />
                        <button @onclick="SendMessage" class="btn btn-primary" disabled="@(isLoading || string.IsNullOrWhiteSpace(currentMessage))">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status"></span>
                            }
                            else
                            {
                                <span>Send</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int ThreadId { get; set; }
    [Parameter] public string ThreadName { get; set; } = string.Empty;
    [Parameter] public int UserId { get; set; }
    [Parameter] public string LogoImgRelativePath { get; set; } = string.Empty;
    [Parameter] public string BaseUrl { get; set; } = string.Empty;

    private List<AiraUnifiedChatMessageViewModel> messages = new();
    private string currentMessage = string.Empty;
    private bool isLoading = false;
    private ElementReference messagesContainer;
    private ElementReference messageInput;

    protected override async Task OnInitializedAsync()
    {
        await LoadChatHistory();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await messageInput.FocusAsync();
        }
    }

    private async Task LoadChatHistory()
    {
        try
        {
            messages = await ChatService.GetChatHistoryAsync(UserId, ThreadId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading chat history: {ex.Message}");
        }
    }

    private void OnInputChange(ChangeEventArgs e)
    {
        currentMessage = e.Value?.ToString() ?? string.Empty;
        // Neříkáme StateHasChanged() zde, protože to způsobuje ztrátu focusu
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isLoading)
            return;

        var messageText = currentMessage.Trim();
        currentMessage = string.Empty;
        isLoading = true;
        StateHasChanged();

        try
        {
            // Add user message to UI immediately
            messages.Add(new AiraUnifiedChatMessageViewModel
            {
                Message = messageText,
                Role = "user",
                CreatedWhen = DateTime.Now
            });
            StateHasChanged();
            await ScrollToBottom();

            // Send message and get AI response
            var aiResponse = await ChatService.SendMessageAsync(messageText, UserId, ThreadId);
            
            if (aiResponse != null)
            {
                messages.Add(aiResponse);
                StateHasChanged();
                await ScrollToBottom();
            }
        }
        catch (Exception ex)
        {
            messages.Add(new AiraUnifiedChatMessageViewModel
            {
                Message = $"Error: {ex.Message}",
                Role = "system",
                CreatedWhen = DateTime.Now
            });
            StateHasChanged();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await messageInput.FocusAsync(); // Vrátíme focus po odeslání
        }
    }

    private async Task UseQuickPrompt(string prompt, string groupId)
    {
        currentMessage = prompt;
        await SendMessage();
        
        if (!string.IsNullOrEmpty(groupId))
        {
            await ChatService.RemoveUsedPromptsAsync(groupId);
            StateHasChanged();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            //e.preventDefault(); // Zabránit default behavior
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainer);
        }
        catch
        {
            // Ignore JS errors
        }
    }
}

<script>
    window.scrollToBottom = (element) => {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>